/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vet.clinic;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author isabel
 */
public class TelaProntuario extends javax.swing.JPanel {
    TelaPrincipal telaPrincipal;
    /**
     * Creates new form TelaProntuario
     */
    public TelaProntuario(TelaPrincipal telaPrincipal) {
        this.telaPrincipal = telaPrincipal;
        initComponents();
        
        // Quando o painel for exibido, recarrega os tutores
        this.addComponentListener(new java.awt.event.ComponentAdapter() {
            @Override
            public void componentShown(java.awt.event.ComponentEvent e) {
                preencherComboTutores();
            }
        });
    }
    
    // Método para mostrar diálogo de seleção de animal
    private Animal selecionarAnimal(ArrayList<Animal> animais) {
        // Criar um array com os nomes dos animais para mostrar na combo
        String[] nomes = new String[animais.size()];
        for (int i = 0; i < animais.size(); i++) {
            nomes[i] = animais.get(i).getNome();
        }

        String selecionado = (String) JOptionPane.showInputDialog(
            this,
            "Selecione um animal:",
            "Seleção de Animal",
            JOptionPane.PLAIN_MESSAGE,
            null,
            nomes,
            nomes[0]);

        if (selecionado == null || selecionado.equals("Selecione...")) {
            return null; // cancelou ou não escolheu animal válido
        }
        
        // Encontrar o animal com o nome selecionado e retornar
        for (Animal a : animais) {
            if (a.getNome().equals(selecionado)) {
                return a;
            }
        }
      
        return null; // cancelou ou não encontrou
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cxAnimal = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaInfo = new javax.swing.JTable();

        cxAnimal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cxAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cxAnimalActionPerformed(evt);
            }
        });

        jLabel1.setText("Animal");

        tabelaInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Data", "Médico", "Problema", "Diagnóstico", "Medicamentos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cxAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cxAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cxAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cxAnimalActionPerformed
        String nomeSelecionado = (String) cxAnimal.getSelectedItem();
        if (nomeSelecionado == null) return;

        Animal animalSelecionado = null;
        for (Animal a : telaPrincipal.getSistema().getAnimais()) {
            if (a.getNome().equals(nomeSelecionado)) {
                animalSelecionado = a;
                break;
            }
        }

        if (animalSelecionado != null) {
            List<Consulta> consultas = animalSelecionado.getConsultas();

            DefaultTableModel model = (DefaultTableModel) tabelaInfo.getModel();
            model.setRowCount(0);

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

            for (Consulta c : consultas) {
                model.addRow(new Object[]{
                    c.getData().format(formatter),
                    c.getVet().getNome(),
                    c.getProblema(),
                    c.getDiagnostico(),
                    c.getMedicamentos()
                });
            }
        }    
    }//GEN-LAST:event_cxAnimalActionPerformed

    private void preencherComboTutores() {
            // TODO add your handling code here:
        ArrayList<Animal> lista = telaPrincipal.getSistema().getAnimais();

        // Cria um modelo de String e popula com os nomes
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Selecione um animal...");
        for (Animal a : lista) {
            model.addElement(a.getNome());
        }

        // Atualiza o combo
        cxAnimal.setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cxAnimal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaInfo;
    // End of variables declaration//GEN-END:variables
}
